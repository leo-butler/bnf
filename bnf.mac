/* -*- mode: maxima -*- */
/* Compute the Birkhoff Normal Form */
/*
* $Id:$
*
* Author: Leo Butler (leo.butler@umanitoba.ca)
*
* This file is Maxima code (http://maxima.sourceforge.net/)
* 
* It is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation; either version 3 of the License, or (at your
  * option) any later version.
* 
* This software is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
* or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
* License for more details.
* 
* You should have received a copy of the GNU General Public License
* along with this file. If not, see http://www.gnu.org/licenses/. 
*/

/* Requires: 
             with_gensyms
             https://github.com/leo-butler/with_gensyms.git
*/
             
load(with_gensyms) $ wg_reversealias:false $
load(lrats) $
load(facexp) $

/* Utilities */
add_maxima_symbol('parameter);
declare(parameter,feature)$
parameterp(x) :> is((atom(x) and featurep(x,parameter)) or (subvarp(x) and featurep(op(x),parameter)))$

monomialp(e,x) :> block([listconstvars:false, listdummyvars:true],
  if every(lambda([t], member(t,x)),listofvars(e)) then
    if mapatom(e) then true
    else if op(e)="*" then is(monomialp(first(e),x) and monomialp(rest(e),x))
    else if op(e)="^" then is(monomialp(first(e),x)) and freeofl([second(e)],x))$
rat_multi_exponent(e,x) :> if monomialp(e,x) then map(lambda([t],hipow(e,t)),x) else error("rat_multi_exponent: expression must be a monomial.")$

zero_by_p(p,e) :> block([ρ],
  ρ:map(lambda([x], x=0),listof(e,p)),
  lratsubst(ρ,e))$

listof(e,p) :> block([listconstvars:true], sublist(listofvars(e),p)) $
listofparameters(e) :> listof(e,parameterp) $
listofindeterminates(e) :> listof(e,lambda([x], not(parameterp(x) or constantp(x) or member(x,%rnum_list)))) $

%monomials(v,n) :> if length(v)=1 then v^n else flatten(makelist(v[1]^k*%monomials(rest(v),n-k),k,0,n));
monomials(v,n) :> if v=[] then [1] else if mapatom(v) then [v^n] else if length(v)=1 then v^n else if op(v)#"[" then monomials(subst(op(v)="[",v),n) else reverse(%monomials(v,n));

remove_rnums(e) :> zero_by_p(lambda([x],member(x,%rnum_list)),e) $

add_maxima_symbol('ϣ)$
declare(ϣ,[parameter,constant])$
homogeneous_polynomial(x,n,[c]) :> block([m],
  m:monomials(x,n),
  c:if c=[] then map(lambda([χ], arraymake(ϣ,rat_multi_exponent(χ,x))), m) else if length(c)=1 then part(c,1) else c,
  m.c) $
polynomial(x,n,N) :> sum(homogeneous_polynomial(x,k), k, n, N)$

homogeneous_polynomial_to_list(p,n,[x]) :> block([m,include_monomials,hcoef],
  include_monomials:if length(x)<2 then false else second(x),
  if include_monomials=true then hcoef:lambda([t], [ratcoef(p,t),t]) else hcoef:lambda([t], ratcoef(p,t)),
  x:if x=[] or x=[[]] then listofindeterminates(p) else first(x),
  if n=0 or x=[] then (
    p:zero_by_p(lambda([v],member(v,x)),p),
    if include_monomials then [[p,1]] else [p])
  else (
    m:monomials(x,n),
    map(hcoef,m))) $
polynomial_to_list(p,N,[x]) :> block([l,ratwtlvl],
  l:[],
  x:if x=[] or x=[[]] then listofindeterminates(p) else first(x),
  if x=[] then N:0,
  for n:N thru 0 step -1 do (
    ratwtlvl:n,
    p:collecttermsl(ratexpand(p),x),
    l:append(l, homogeneous_polynomial_to_list(p,n,x,true))),
  l)$

/*
e = c*s + higher terms in s + other terms
return e/c if c#0 otherwise e
*/
misolate(s,e) :> block([r:ratwtlvl,ratwtlvl:1,c],
  c:ratcoef(rat(e),s),
  if c=0 then e else (ratwtlvl:r,ratexpand(e/c)))$

/* σ = dφ_dΣ */
genfun_transformation_scalar(s,σ,dφ_dΣ) :> block([imax,i,v,sub],
  imax:ratwtlvl+1, i:0, v:s,
  sub:misolate(s,- σ + dφ_dΣ),
  while i<imax and not freeof(s,v) do (
    i : i+1,
    v : ratsubst(-sub + s, s, v)),
  v)$

freeofl(t,e) :> apply(freeof, append(t,[e])) $

iter_solve(eqs,vars,ratwtlvl,[subs]) :> block([i,imax,e],
  e:vars, eqs:subst("="="-",eqs),
  imax:ratwtlvl*length(eqs)+1, i:0,
  subs:if subs=[] then map("=",vars,-map(misolate,vars,eqs) + vars) else first(subs),
  while i<imax and not(freeofl(vars,e)) do (i:i+1, e:lratsubst(subs,e)),
  print("i=",i),
  map("=",vars,e)) $  

genfun_transformation(x,X,φ,ratwtlvl) :> block([n,α,Α,β,Β,γ,Γ,δ,dφ,s],
  n:length(x)/2,
  α:makelist(x[i],i,1,n),
  Α:makelist(x[n+i],i,1,n),
  β:makelist(X[i],i,1,n),
  Β:makelist(X[n+i],i,1,n),
  γ:append(Α,β),
  Γ:append(α,Β),
  δ:append(β,Α),
  /* α = dφ_dΑ, Β = dφ_dβ or Γ = dφ */ 
  dφ:mgrad(φ,γ),
  s:[],
  if ratwtlvl<0 then (ratwtlvl:-ratwtlvl, s:solve(dφ-Γ,δ)),
  if s=[] then s:iter_solve(- Γ + dφ, δ, ratwtlvl) else s:first(s),
  [map("=",Γ,dφ), s])$

genfun_transformation_explicit(x,X,φ,ratwtlvl) :> block([imax,i,v,n,α,Α,β,Β,γ,Γ,δ,dφ,t,s,e,subs],
  n:length(x)/2,
  α:makelist(x[i],i,1,n),
  Α:makelist(x[n+i],i,1,n),
  β:makelist(X[i],i,1,n),
  Β:makelist(X[n+i],i,1,n),
  Γ:append(α,Β),
  /* α = dφ_dΑ, Β = dφ_dβ or Γ = dφ */ 
  γ:append(Α,β),
  dφ:mgrad(φ,γ),
  if ratwtlvl<0 or abs(ratwtlvl)=2 then (ratwtlvl:abs(ratwtlvl), s:solve(dφ-Γ,X)) else s:[],
  if s=[] then s:iter_solve(- Γ + dφ, X, ratwtlvl) else s:first(s),
  [map("=",Γ,dφ), s])$

mgrad(f,v) :> map(lambda([t], diff(f,t)), v)$

add_maxima_symbol('solve_for_parameters1_solve);
solve_for_parameters1_solve:'linsolve;
solve_for_parameters1(p,ratwtlvl) :> block([ρ,ε,ν],
  ν:listofindeterminates(p),
  ρ:listofparameters(p),
  p:collecttermsl(ratexpand(p),ν),
  ε:delete(0,map(first,polynomial_to_list(p,ratwtlvl,ν))),
  ε:subst(map("=",ν,0*ν),ε),
  apply(solve_for_parameters1_solve,[ε,ρ]))$

bnf1(x,X,φ,f,r) :> block([ratwtlvl:abs(r),τ,v,fr],
  φ:ratexpand(φ),
  τ:second(genfun_transformation(x,X,φ,r)),
  v:append(x,X),
  τ:collecttermsl(ratexpand(τ),v),
  f:collecttermsl(ratexpand(f),v),
  fr:collecttermsl(ratexpand(lratsubst(τ,f)),v),
  if fr=0 then linsolve(listofparameters(τ),listofparameters(τ)) else solve_for_parameters1(fr,ratwtlvl))$
bnf2(x,X,φ,f,g,r) :> block([ratwtlvl:false,τ,s,v],
  s:[], f:f-g,
  for R:3 thru r do (
    ratwtlvl:R,
    s:remove_rnums(append(s,bnf1(x,X,φ,f,R))),
    ratwtlvl:r,
    [φ,f]:fullratsubst(s,[φ,f])),
  τ:second(genfun_transformation(x,X,φ,r)),
  [s, fullratsubst(τ,f), fullratsubst(τ,g), ratexpand(φ)])$

verify_bnf(x,X,φ,f,s,[remove_params]) :> block([τ],
  φ:lratsubst(s,φ),
  φ:zero_by_p(subvarp,φ),
  if remove_params#[] then φ:zero_by_p(parameterp,φ),
  τ:subst(s, second(genfun_transformation(x,X,φ,ratwtlvl))),
  f:lratsubst(τ,f),
  [φ,τ,lratsubst(s,f)])$

add_maxima_symbol('I)$
hipowl(e) :> block([t], hipow(lratsubst(map(lambda([x],x=t),listofindeterminates(e)),e),t))$
det2x2(x) :> x[1][1]*x[2][2] - x[1][2]*x[2][1] $
hess(f,v) :> outermap(lambda([x,y],diff(f,x,1,y,1)),v,v)$
ezbnf_change_variables(x,f2) :> block([f2l,n,c,δ,s,r],
  local(a,r), declare(a,parameter),
  r(u,v,w) := if v#0 then 1 else (w/u)^(1/4),
  n:length(x)/2,
  c:flatten(makelist([a[i,1]=ratcoef(f2,x[i]^2), a[i,2]=ratcoef(f2,x[i]*x[i+n]), a[i,3]=ratcoef(f2,x[i+n]^2)], i,1,n)),
  f2l:subst(c,makelist(a[i,1]*part(x,i)^2 + a[i,2]*part(x,i)*part(x,i+n)+a[i,3]*part(x,i+n)^2,i,1,n)),
  s:makelist(part(x,i)=part(x,i)*r(c[3*i-2],c[3*i-1],c[3*i]), i,1,n),
  s:append(s, makelist(part(x,i+n)=part(x,i+n)*r(c[3*i],c[3*i-1],c[3*i-2]), i,1,n)),
  δ:makelist(det2x2(hess(part(f2l,i),listofindeterminates(part(f2l,i)))),i,1,n),
  δ:map(sqrt, δ),
  [f2l,δ]:lratsubst(c,[f2l,δ]),
  /* return quadratic parts, frequencies and transformation of variables separately */
  [f2l,δ,s]
  );

mratexpand(f,ratwtlvl) :> ratexpand(f);
mratexpand(f,n) :> ev(ratexpand(f),ratwtlvl=n);
ezbnf(x,f,ratwtlvl,[φ]) :> block([X,n,d,f2,f2l,F,c,I,s,u,Σ,g,g2,a,δ],
  local(a), declare(a,parameter),
  if not(listp(x)) then error("ezbnf(variables,expression,ratwtlvl,[genfun]): expected a variable list, got ~a.",x),
  X:map(lambda([t],concat('%,t)),x),
  apply(ratweight,flatten(map(lambda([t],[t,1]), sublist(append(x,X),lambda([t], not(is(member(t,ratweight())))))))),
  n:length(x)/2,
  u:makelist(part(X,i),i,1,n), Σ:makelist(part(x,i+n),i,1,n),
  f:taylor(f,x,0*x,ratwtlvl),
  f2:mratexpand(f,2),
  [f2l,δ,s]:ezbnf_change_variables(x,f2),
  /* ignore change of variables, we use un-normalized quadratic parts -> speed */
  if false then f:lratsubst(s,f),
  I:makelist(concat('I,i), i,1,n),
  /* don't normalize frequencies in F while computing BNF */
  F:apply("+",I) + block([ϣ:a],polynomial(I,2,ratwtlvl/2)),
  g2:map("=",I,f2l),
  [g,g2]:subst(map("=",x,X),[subst(g2,F),g2]),
  [φ,d]:if φ=[] then [u.Σ,3] else [first(φ),hipowl(first(φ))+1],
  φ:φ + polynomial(append(u,Σ),d,ratwtlvl),
  sol:bnf2(x,X,φ,f,g,ratwtlvl),
  /* normalize frequencies at this point, to get a BNF */
  append([subst(map("=",I,I*δ),subst(first(sol),F))],map(lambda([a,b],lhs(a)=ratexpand(rhs(a)/b)),g2,δ),sol))$

%ezbnf(v,h,n) :> block([s],s:ezbnf(v,h,3),
  if n = 3 then s else %%ezbnf(v,h,4,n,last(s)))$
%%ezbnf(v,h,m,n,[s]) :> if m = n then ezbnf(v,h,m,last(s))
else %%ezbnf(v,h,m+1,n,last(ezbnf(v,h,m,last(s))))$


/* Lie Transforms
*/

canonical_poisson_structure(n) := genmatrix(lambda([i,j],kron_delta(i+n,j)-kron_delta(i,j+n)),2*n,2*n) $

grad(H,x,[fun]) := block([∇H],
  ∇H : map(lambda([v],diff(H,v)),x),
  if fun=[] or first(fun)=false then ∇H else funmake(lambda,[x,∇H]));

pgrad(H,x,[opts]) := block([vf,n,ps,fun],
  n:length(x)/2,
  if opts=[] then (fun:false, ps:canonical_poisson_structure(n))
  else if length(opts)=1 then (fun:first(opts), ps:canonical_poisson_structure(n))
  else (fun:first(opts), ps:second(opts)),
  vf : ps . matrix(grad(H,x)),
  vf : flatten(args(vf)),
  if not(fun) then vf else funmake(lambda,[x,vf]));

add_maxima_symbol('[grad,sgrad,pgrad,gradfun,pgradfun,poisson_structure,coordinates,hamvf,hamiltonian,hamiltonianfun,Λ,hamiltonians,define_hamvf_hooks]) $
define_variable(define_hamvf_hooks,[],listp)$
remarray(hamiltonians);
hamiltonians[H] := false;
define_hamvf(Hsym,Hexpr,x,[Poisson_structure]) :> block([n,ps],
  if not(define_hamvf_hooks=[]) then for func in define_hamvf_hooks do Hexpr:apply(func,[Hexpr]),
  n:length(x)/2,
  ps:if Poisson_structure=[] then canonical_poisson_structure(n) else first(Poisson_structure),
  put(Hsym,Hexpr,'hamiltonian),
  put(Hsym,funmake(lambda,[x,Hexpr]),'hamiltonianfun),
  put(Hsym,pgrad(Hexpr,x,false,ps),'pgrad),
  put(Hsym,grad(Hexpr,x),'grad),
  put(Hsym,ps,'poisson_structure),
  put(Hsym,pgrad(Hexpr,x,true,ps),'pgradfun),
  put(Hsym,grad(Hexpr,x,true,ps),'gradfun),
  put(Hsym,x,'coordinates),
  put(Hsym,true,'hamvf),
  put(Hsym,false,'updated),
  hamiltonians[Hsym]:Hexpr,
  Hsym);
update_hamiltonians(updates) :> block([hams],
  hams:map(first,rest(arrayinfo(hamiltonians),2)),
  for ham in hams do (
    if true then (
      define_hamvf(ham,lratsubst(updates,get(ham,'hamiltonian)),get(ham,'coordinates),get(ham,'poisson_structure)),
      put(ham,true,'updated))));

print_array(A) :> block([keys,l], keys:rest(apply('arrayinfo,[A]),2),
  l:if keys=[] then '[empty] else makelist([first(k),arrayapply(A,k)],k,keys),
  printf(true,"~{~a~^~%~}",l), 'done);

add_maxima_symbol('[canonical_coordinates,poisson_bracket_strict,poisson_bracket]);
safe_op(x) :> if not(atom(x)) then op(x);
poisson_bracket_strict(Hsym,Fsym) :> block([pb,lst:gensym("list_"),sub,isub,pbs],
  sub:["["=lst,"+"="["],
  isub:["["="+",lst="["],
  pbs:[pb=poisson_bracket_strict],
  if constantp(Hsym) or constantp(Fsym) then 0
  else if hamiltonianp(Hsym) and hamiltonianp(Fsym) then define_hamvf(concat(Hsym,'_,Fsym),collecttermsl(ratexpand(get(Hsym,'grad) . get(Fsym,'pgrad)),get(Hsym,'coordinates)),get(Hsym,'coordinates))
  else if safe_op(Hsym)="+" and safe_op(Fsym)="+" then
  subst(pbs,
    expand_poisson_bracket(
      subst(isub,
        outermap(pb,
          subst(sub,expand_poisson_bracket(Hsym,poisson_bracket_strict,false)),
          subst(sub,expand_poisson_bracket(Fsym,poisson_bracket_strict,false)))),pb,false))
  else if safe_op(Hsym)="+" then
  subst(pbs,
    expand_poisson_bracket(
      subst(isub,
        map(lambda([s],pb(s,Fsym)),
          subst(sub,expand_poisson_bracket(Hsym,poisson_bracket_strict,false)))),pb,false))
  else if safe_op(Fsym)="+" then
  subst(pbs,
    expand_poisson_bracket(
      subst(isub,
        map(lambda([s],pb(Hsym,s)),
          subst(sub,expand_poisson_bracket(Fsym,poisson_bracket_strict,false)))),pb,false))
  else if member(safe_op(Hsym),["-","*","/"]) or member(safe_op(Fsym),["-","*","/"]) then
  subst(pbs,expand_poisson_bracket(pb(Hsym,Fsym),pb,false))
  else if hamiltonianp(Hsym) then poisson_bracket_strict(Hsym,define_hamvf(gensym("FHamiltonian_"),Fsym,get(Hsym,'coordinates)))
  else if hamiltonianp(Fsym) then poisson_bracket_strict(define_hamvf(gensym("HHamiltonian_"),Hsym,get(Fsym,'coordinates)),Fsym)
  else if listp(canonical_coordinates) then poisson_bracket_strict(define_hamvf(gensym("HHamiltonian_"),Hsym,canonical_coordinates),define_hamvf(gensym("FHamiltonian_"),Fsym,canonical_coordinates))
  else funmake(nounify(poisson_bracket_strict),[Hsym,Fsym]));
poisson_bracket(Hsym,Fsym) :> block([res],
  res:poisson_bracket_strict(Hsym,Fsym),
  if hamiltonianp(res) then get(res,'hamiltonian) else funmake(nounify(poisson_bracket),[Hsym,Fsym]));
texput(nounify(poisson_bracket),lambda([expr], block([x:args(expr)], printf(false,"\\{~a,~a\\}",tex1(first(x)),tex1(second(x))))));
texput(nounify(poisson_bracket_strict),lambda([expr], block([x:args(expr)], printf(false,"\\{~a,~a\\}",tex1(first(x)),tex1(second(x))))));

add_maxima_symbol('[Λ,ϵ,poisson_bracket,forget_Λ,POISSON_BRACKET]) $
remarray(Λ);
Λ[w,f] := [];
forget_Λ : false;
%Λ(w,f,n,ϵ) :> block([fk,fk1,L,l,ham,ham1],
  L:Λ[w,f], l:if forget_Λ then 0 else length(L),
  if l>n then part(L,l-n) else (
    if l=0 then (Λ[w,f] : [f], fk1:f, l:1)
    else fk1:first(Λ[w,f]),
    for k:l thru n do (
      fk:concat(w,'_,f,'_,k),
      ham1:expand_poisson_bracket(fk1,poisson_bracket),
      ham:apply(poisson_bracket,[fk1,w]) + diff(ham1,ϵ),
      ham:ratexpand_poisson_bracket(ham,poisson_bracket,ϵ,ratwtlvl),
      define_hamvf(fk,ham,get(f,'coordinates)),
      Λ[w,f] : cons(fk,Λ[w,f]),
      fk1:fk),
    first(Λ[w,f])))$
%Λ₀(w,f,n,ϵ,[pb]) :> block(
  pb:if pb=[] then 'poisson_bracket else first(pb),
  subst(ϵ=0,expand_poisson_bracket(apply1(%Λ(w,f,n,ϵ),coerce2hamiltonian),pb)));
Λ(w,f,[opts]) :> block([ϵ,n],
  if opts=[] then (ϵ:'ϵ, n:1)
  else if length(opts)=1 then (n:first(opts), ϵ:'ϵ)
  else (n:first(opts), ϵ:second(opts)),
  %Λ(w,f,n,ϵ));
%expΛ(w,f,n,ϵ) :> define_hamvf(concat('exp,'_,w,'_,f,'_,n),sum(%Λ₀(w,f,k,ϵ)*ϵ^k/k!,k,0,n),get(f,'coordinates)) $
expΛ(w,f,[opts]) :> block([ϵ,n],
  if opts=[] then (ϵ:'ϵ, n:0)
  else if length(opts)=1 then (n:first(opts), ϵ:'ϵ)
  else (n:first(opts), ϵ:second(opts)),
  %expΛ(w,f,n,ϵ));
hamiltonianp(expr) :> is(symbolp(expr) and get(expr,'hamvf));
matchdeclare(HAMILTONIAN,hamiltonianp);
defrule(coerce2hamiltonian,HAMILTONIAN,get(HAMILTONIAN,'hamiltonian));
add_maxima_symbol('coerce2hamiltonian);
deprit_transformation(newf,w,f,n,ϵ) :> define_hamvf(newf,taylor(apply1(expΛ(w,f,n,ϵ),coerce2hamiltonian),ϵ,0,n),get(f,'coordinates));
expand_poisson_bracket(expr,pb,[coerce]) :> (coerce:is(coerce=[]),
  expr:if coerce=true then apply1(expr,coerce2hamiltonian) else expr,
  if hamiltonianp(expr) then expand_poisson_bracket(expr,pb)
  else block([dotassoc:false, dotscrules:true, dotop:gensym("dotop_")], subst(["."=pb,dotop="."],expand(subst(["."=dotop,pb="."],expr)))));
ratexpand_poisson_bracket(expr,pb,ϵ,ratwtlvl) :> collectterms(ratexpand(expand_poisson_bracket(expr,pb)),ϵ) $
declare(poisson_bracket,feature);
declare(poisson_bracket,poisson_bracket);
poisson_bracket_p(pb) := is(symbolp(pb) and featurep(pb,poisson_bracket));
matchdeclare(POISSON_BRACKET,poisson_bracket_p);
defrule(coercepb,POISSON_BRACKET,lambda([f,g],print(HERE),diff(f,x)*diff(g,y)-diff(f,y)*diff(g,x)));

add_maxima_symbol('graded_hamiltonian);
define_graded_hamvf(Hsym,Hexpr,x,ϵ,n,[Poisson_structure]) :> block([Ht,ps,Hsymt],
    ps:if Poisson_structure=[] then canonical_poisson_structure(length(x)/2) else first(Poisson_structure),
    define_hamvf(Hsym,Hexpr,x,ps),
    Ht : collectterms(ratexpand(taylor(Hexpr,ϵ,0,n)),ϵ),
    Ht : reverse(map(first,polynomial_to_list(Ht,n,[ϵ]))),
    Hsymt : makelist(concat(Hsym,'_,k),k,0,length(Ht)-1),
    for k:1 thru length(Ht) do (
      Ht[k] : Ht[k]*(k-1)!,
      define_hamvf(Hsymt[k],Ht[k],x)),
    put(Hsym,Hsymt,'graded_hamiltonian),
    Hsym);

safe_get(atm,pty) :> if symbolp(atm) then get(atm,pty);
graded_hamiltonian_part(f,n) :> block([l:get(f,'graded_hamiltonian)], if length(l)>=n then part(l,n) else 0);
reinit_deprit_new_f() := block(
  remarray(deprit_new_f),
  remarray(deprit_new_f2),
  remarray(hamiltonians),
  deprit_new_f[w,f,k,n] :> if k=0 then graded_hamiltonian_part(f,n+1) 
  else block([res],
    res:deprit_new_f[w,f,k-1,n+1] + sum(binomial(n,m)*apply(poisson_bracket,[deprit_new_f[w,f,k-1,n-m],graded_hamiltonian_part(w,m+1)]),m,0,n),
    ev(res,infeval)),
  deprit_new_f2[w,f,k,n] :> if k=0 then graded_hamiltonian_part(f,n+1) 
  else block([res],
    res:deprit_new_f2[w,f,k-1,n+1] + sum(binomial(n,m)*apply(poisson_bracket,[deprit_new_f2[w,f,k-1,n-m],graded_hamiltonian_part(w,m+1)]),m,0,n),
    res:ev(res,infeval),
    define_hamvf(concat('new,'_,f,'_,w,'_,k,'_,n),rat(apply1(res,coerce2hamiltonian)),get(f,'coordinates),get(f,'poisson_structure))));
deprit_new_f(w,f,k,n) :> deprit_new_f[w,f,k,n];
deprit_new_f2(w,f,k,n) :> deprit_new_f2[w,f,k,n];
reinit_deprit_new_f();

%deprit_lie_transform(w,f,n,ϵ) :> sum(ϵ^k/k! * deprit_new_f(w,f,k,0), k, 0, n);
deprit_lie_transform(w,f,n,ϵ) :> define_graded_hamvf(concat('exp,'_,w,'_,f,'_,n),%deprit_lie_transform(w,f,n,ϵ),get(f,'coordinates),ϵ,n);

add_maxima_symbol('dcoerce2ham);
dcoerce2ham(expr) :> if hamiltonianp(expr) then get(expr,'hamiltonian) else if atom(expr) then expr else if member(op(expr),["+","*","-","/"]) then map(dcoerce2ham,expr) else expr;
ezdhnf(f,g,n,ϵ,alg) := block([poisson_bracket:poisson_bracket_strict,%rnum:0,ratweights:[],sk:[],sol:[],canonical_coordinates:get(f,'coordinates),fk,set_to_zero,debug:false],
  ratweight(ϵ,1),
  safe_length:lambda([x], if atom(x) then 0 else length(x)),
  debug_print:lambda([[x]],if debug=true then apply('print,x)),
  set_to_zero:lambda([l],map(lambda([x],x=0),l)),
  print_time:lambda([],    endtime:elapsed_run_time(), print('time,endtime-starttime), starttime:endtime),
  grham:get(g,'graded_hamiltonian),
  Wham:homogeneous_polynomial(canonical_coordinates,3),
  /*Wtr:'Wtr0,*/
  starttime:elapsed_run_time(),
  endtime:starttime,
  define_graded_hamvf(Wtr,Wham,canonical_coordinates,ϵ,0),
  for k:1 thru n do (
    print("k=",k),
    %rnum:0,
    update_hamiltonians(sol),
    gham:lratsubst(sol,get(grham[k+1],'hamiltonian)),
    print_time(),
    fk:apply(alg,[Wtr,f,k,0]),
    debug_print('k,k,'fk,fk),
    print_time(),
    fk:get(fk,'hamiltonian),
    debug_print('fk,fk),
    /*
    eqs:homogeneous_polynomial_to_list(fk/k!-gham,2+k,canonical_coordinates),
    params:listofparameters(eqs),
    sk:linsolve(eqs,params),
    */
    sk:solve_for_parameters1(fk/k!-gham,2+k),
    sk:lratsubst(set_to_zero(%rnum_list),sk),
    sol:append(sk,sol),
    print_time(),
    Wtr0:Wtr, /*Wtr:concat('Wtr,k),*/
    if k<n then define_graded_hamvf(Wtr,lratsubst(sk,get(Wtr0,'hamiltonian))+ϵ^k/k!*homogeneous_polynomial(canonical_coordinates,3+k),canonical_coordinates,ϵ,k)
    ),
  [Wtr,sol]);
ezdnf(f,g,n,ϵ) := ezdhnf(f,g,n,ϵ,'deprit_new_f2);

/* Hori */
reinit_hori_new_f() := block(
  remarray(hori_new_f1),
  remarray(hori_new_f12),
  remarray(hori_new_f),
  remarray(hori_new_f2),
  /*remarray(hamiltonians),*/
  hori_new_f1[w,f,k,n] :> if k=0 then graded_hamiltonian_part(f,n+1) 
  else block([res],
    res:sum(binomial(n,m)*apply(poisson_bracket,[hori_new_f1[w,f,k-1,n-m],graded_hamiltonian_part(w,m+1)]),m,0,n),
    ev(res,infeval)),
  hori_new_f12[w,f,k,n] :> if k=0 then graded_hamiltonian_part(f,n+1) 
  else block([res],
    res:sum(binomial(n,m)*apply(poisson_bracket,[hori_new_f12[w,f,k-1,n-m],graded_hamiltonian_part(w,m+1)]),m,0,n),
    res:ev(res,infeval),
    define_hamvf(concat('new12,'_,f,'_,w,'_,k,'_,n),rat(apply1(res,coerce2hamiltonian)),get(f,'coordinates),get(f,'poisson_structure))),
  hori_new_f[w,f,n] :> sum(binomial(n,m)*hori_new_f1[w,f,m,n-m],m,0,n),
  hori_new_f2[w,f,n] :> block([res:hori_new_f[w,f,n]],
    res:ev(res,infeval),
    define_hamvf(concat('new,'_,f,'_,w,'_,n),rat(apply1(res,coerce2hamiltonian)),get(f,'coordinates),get(f,'poisson_structure)))
  );
hori_new_f1(w,f,k,n) :> hori_new_f1[w,f,k,n];
hori_new_f12(w,f,k,n) :> hori_new_f12[w,f,k,n];
hori_new_f(w,f,n) :> hori_new_f[w,f,n];
hori_new_f2(w,f,n) :> hori_new_f2[w,f,n];
hori_new_f3(w,f,k,n) :> hori_new_f2(w,f,k);
reinit_hori_new_f();
ezhnf(f,g,n,ϵ) := ezdhnf(f,g,n,ϵ,'hori_new_f3);


/* end of bnf.mac */
